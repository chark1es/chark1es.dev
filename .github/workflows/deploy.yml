name: Deploy to Coolify

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches: [main, master]
    push:
        branches: [main, master]

jobs:
    deploy-preview:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up environment variables
              run: |
                  echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
                  echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
                  echo "PREVIEW_SUBDOMAIN=pr-${{ github.event.number }}-$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Deploy to Coolify
              id: deploy
              run: |
                  # Create deployment payload
                  DEPLOYMENT_PAYLOAD=$(cat <<EOF
                  {
                    "project_uuid": "${{ secrets.COOLIFY_PROJECT_UUID }}",
                    "environment_name": "preview-pr-${{ github.event.number }}",
                    "git_repository": "${{ github.repository }}",
                    "git_branch": "${{ github.head_ref }}",
                    "domains": ["${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"],
                    "environment_variables": {
                      "NODE_ENV": "production",
                      "PR_NUMBER": "${{ github.event.number }}",
                      "BRANCH_NAME": "${{ github.head_ref }}"
                    }
                  }
                  EOF
                  )

                  # Deploy to Coolify via API
                  RESPONSE=$(curl -s -X POST \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "$DEPLOYMENT_PAYLOAD" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/deploy")

                  echo "Coolify API Response: $RESPONSE"

                  # Extract deployment ID or URL from response
                  DEPLOYMENT_ID=$(echo $RESPONSE | jq -r '.deployment_id // .id // "unknown"')
                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

                  # Wait for deployment to complete
                  echo "Waiting for deployment to complete..."
                  for i in {1..30}; do
                    STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                      "${{ secrets.COOLIFY_API_URL }}/api/v1/deployments/$DEPLOYMENT_ID/status")
                    
                    STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "pending"')
                    echo "Deployment status: $STATUS (attempt $i/30)"
                    
                    if [ "$STATUS" = "success" ] || [ "$STATUS" = "completed" ]; then
                      echo "Deployment completed successfully!"
                      break
                    elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
                      echo "Deployment failed!"
                      exit 1
                    fi
                    
                    # If we've reached the maximum attempts, exit with timeout
                    if [ $i -eq 30 ]; then
                      echo "❌ Deployment timeout after 5 minutes (30 attempts)"
                      echo "Last known status: $STATUS"
                      exit 1
                    fi
                    
                    sleep 10
                  done

                  # Set the preview URL
                  PREVIEW_URL="https://${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

            - name: Comment PR with preview link
              uses: actions/github-script@v7
              with:
                  script: |
                      const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
                      const deploymentId = '${{ steps.deploy.outputs.deployment_id }}';

                      const comment = `🚀 **Preview Deployment Ready!**

                      Your PR has been deployed to Coolify:
                      🔗 **Preview URL:** ${previewUrl}
                      📦 **Deployment ID:** ${deploymentId}
                      🌟 **Branch:** \`${{ github.head_ref }}\`

                      The preview will be automatically updated when you push new commits to this PR.

                      ---
                      *Deployed via Coolify • PR #${{ github.event.number }}*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

            - name: Output deployment info
              run: |
                  echo "🎉 PR #${{ github.event.number }} deployed successfully!"
                  echo "🔗 Preview URL: ${{ steps.deploy.outputs.preview_url }}"
                  echo "📦 Deployment ID: ${{ steps.deploy.outputs.deployment_id }}"
                  echo "🌿 Branch: ${{ github.head_ref }}"

    deploy-production:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to Production
              id: prod-deploy
              run: |
                  # Test API endpoint first
                  echo "Testing Coolify API connectivity..."
                  TEST_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/projects" || echo "CURL_FAILED")

                  echo "API Test Response: $TEST_RESPONSE"

                  # Check if we got a redirect or HTML response
                  if echo "$TEST_RESPONSE" | grep -q -i "redirect\|html\|<!DOCTYPE"; then
                    echo "❌ API returned HTML/redirect. Possible issues:"
                    echo "1. API URL should include protocol: https://cloud.scrypted.dev"
                    echo "2. Check if /api/v1/ is the correct path for your Coolify version"
                    echo "3. Verify the API token has correct permissions"
                    exit 1
                  fi

                  # Try different API endpoints based on Coolify version
                  echo "Attempting deployment via webhook trigger..."

                  # Option 1: Try webhook-based deployment (common in newer Coolify)
                  WEBHOOK_RESPONSE=$(curl -s -X POST \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/applications/${{ secrets.COOLIFY_PROJECT_UUID }}/deploy" || echo "WEBHOOK_FAILED")

                  echo "Webhook Deploy Response: $WEBHOOK_RESPONSE"

                  # Check if webhook worked
                  if echo "$WEBHOOK_RESPONSE" | jq -e . >/dev/null 2>&1; then
                    DEPLOYMENT_ID=$(echo $WEBHOOK_RESPONSE | jq -r '.deployment_uuid // .uuid // .id // "webhook-deploy"')
                    echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
                    echo "✅ Webhook deployment triggered successfully"
                  else
                    # Option 2: Try direct application restart
                    echo "Webhook failed, trying application restart..."
                    RESTART_RESPONSE=$(curl -s -X POST \
                      -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                      "${{ secrets.COOLIFY_API_URL }}/api/v1/applications/${{ secrets.COOLIFY_PROJECT_UUID }}/restart" || echo "RESTART_FAILED")
                    
                    echo "Restart Response: $RESTART_RESPONSE"
                    
                    if echo "$RESTART_RESPONSE" | jq -e . >/dev/null 2>&1; then
                      DEPLOYMENT_ID="restart-$(date +%s)"
                      echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
                      echo "✅ Application restart triggered"
                    else
                      echo "❌ Both webhook and restart methods failed"
                      echo "Please check:"
                      echo "1. API URL format: ${{ secrets.COOLIFY_API_URL }}"
                      echo "2. Project UUID: ${{ secrets.COOLIFY_PROJECT_UUID }}"
                      echo "3. API Token permissions"
                      exit 1
                    fi
                  fi

                  # Wait for deployment to complete
                  echo "Waiting for production deployment to complete..."

                  # Skip status checking if we don't have a proper deployment ID
                  if [ "$DEPLOYMENT_ID" = "unknown" ] || [ "$DEPLOYMENT_ID" = "webhook-deploy" ] || [[ "$DEPLOYMENT_ID" == restart-* ]]; then
                    echo "Using alternative deployment method, waiting 2 minutes for completion..."
                    sleep 120
                    echo "deployment_status=completed" >> $GITHUB_OUTPUT
                  else
                    # Standard deployment status checking
                    for i in {1..60}; do
                      STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                        "${{ secrets.COOLIFY_API_URL }}/api/v1/deployments/$DEPLOYMENT_ID/status" || echo "STATUS_CHECK_FAILED")
                      
                      if [ "$STATUS_RESPONSE" = "STATUS_CHECK_FAILED" ]; then
                        echo "Status check failed, assuming deployment completed (attempt $i/60)"
                        sleep 10
                        continue
                      fi
                      
                      STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "pending"' 2>/dev/null || echo "unknown")
                      echo "Production deployment status: $STATUS (attempt $i/60)"
                      
                      if [ "$STATUS" = "success" ] || [ "$STATUS" = "completed" ]; then
                        echo "Production deployment completed successfully!"
                        echo "deployment_status=success" >> $GITHUB_OUTPUT
                        break
                      elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
                        echo "Production deployment failed!"
                        echo "deployment_status=failed" >> $GITHUB_OUTPUT
                        exit 1
                      fi
                      
                      # If we've reached the maximum attempts, assume success
                      if [ $i -eq 60 ]; then
                        echo "⚠️ Status check timeout, assuming deployment completed"
                        echo "deployment_status=assumed_success" >> $GITHUB_OUTPUT
                      fi
                      
                      sleep 10
                    done
                  fi

                  # Set the production URL
                  PRODUCTION_URL="https://${{ secrets.COOLIFY_MAIN_DOMAIN }}"
                  echo "production_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT

            - name: Test Production Deployment
              id: test-prod
              run: |
                  echo "Testing production deployment..."
                  PRODUCTION_URL="${{ steps.prod-deploy.outputs.production_url }}"

                  # Wait a moment for DNS/CDN propagation
                  sleep 30

                  # Test if the site is accessible
                  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL" || echo "000")
                  echo "HTTP Status: $HTTP_STATUS"

                  if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
                    echo "✅ Production site is accessible!"
                    echo "site_status=accessible" >> $GITHUB_OUTPUT
                  else
                    echo "❌ Production site is not accessible (HTTP $HTTP_STATUS)"
                    echo "site_status=inaccessible" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: Output Production Deployment Results
              run: |
                  echo "🎉 Production deployment completed!"
                  echo "🌐 Production URL: ${{ steps.prod-deploy.outputs.production_url }}"
                  echo "📦 Deployment ID: ${{ steps.prod-deploy.outputs.deployment_id }}"
                  echo "✅ Deployment Status: ${{ steps.prod-deploy.outputs.deployment_status }}"
                  echo "🔍 Site Status: ${{ steps.test-prod.outputs.site_status }}"
                  echo "🌿 Branch: ${{ github.ref_name }}"

    cleanup-on-close:
        runs-on: ubuntu-latest
        if: github.event.action == 'closed'
        steps:
            - name: Cleanup Coolify deployment
              run: |
                  # Clean up the preview environment when PR is closed
                  curl -X DELETE \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/environments/preview-pr-${{ github.event.number }}"

                  echo "Cleaned up preview environment for PR #${{ github.event.number }}"
