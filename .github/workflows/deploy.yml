name: Deploy PR to Coolify

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches: [main, master]

jobs:
    deploy-preview:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up environment variables
              run: |
                  echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
                  echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
                  echo "PREVIEW_SUBDOMAIN=pr-${{ github.event.number }}-$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Deploy to Coolify
              id: deploy
              run: |
                  # Create deployment payload
                  DEPLOYMENT_PAYLOAD=$(cat <<EOF
                  {
                    "project_uuid": "${{ secrets.COOLIFY_PROJECT_UUID }}",
                    "environment_name": "preview-pr-${{ github.event.number }}",
                    "git_repository": "${{ github.repository }}",
                    "git_branch": "${{ github.head_ref }}",
                    "domains": ["${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"],
                    "environment_variables": {
                      "NODE_ENV": "production",
                      "PR_NUMBER": "${{ github.event.number }}",
                      "BRANCH_NAME": "${{ github.head_ref }}"
                    }
                  }
                  EOF
                  )

                  # Deploy to Coolify via API
                  RESPONSE=$(curl -s -X POST \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "$DEPLOYMENT_PAYLOAD" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/deploy")

                  echo "Coolify API Response: $RESPONSE"

                  # Extract deployment ID or URL from response
                  DEPLOYMENT_ID=$(echo $RESPONSE | jq -r '.deployment_id // .id // "unknown"')
                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

                  # Wait for deployment to complete
                  echo "Waiting for deployment to complete..."
                  for i in {1..30}; do
                    STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                      "${{ secrets.COOLIFY_API_URL }}/api/v1/deployments/$DEPLOYMENT_ID/status")
                    
                    STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "pending"')
                    echo "Deployment status: $STATUS"
                    
                    if [ "$STATUS" = "success" ] || [ "$STATUS" = "completed" ]; then
                      echo "Deployment completed successfully!"
                      break
                    elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
                      echo "Deployment failed!"
                      exit 1
                    fi
                    
                    sleep 10
                  done

                  # Set the preview URL
                  PREVIEW_URL="https://${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

            - name: Comment PR with preview link
              uses: actions/github-script@v7
              with:
                  script: |
                      const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
                      const deploymentId = '${{ steps.deploy.outputs.deployment_id }}';

                      const comment = `ðŸš€ **Preview Deployment Ready!**

                      Your PR has been deployed to Coolify:
                      ðŸ”— **Preview URL:** ${previewUrl}
                      ðŸ“¦ **Deployment ID:** ${deploymentId}
                      ðŸŒŸ **Branch:** \`${{ github.head_ref }}\`

                      The preview will be automatically updated when you push new commits to this PR.

                      ---
                      *Deployed via Coolify â€¢ PR #${{ github.event.number }}*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

            - name: Output deployment info
              run: |
                  echo "ðŸŽ‰ PR #${{ github.event.number }} deployed successfully!"
                  echo "ðŸ”— Preview URL: ${{ steps.deploy.outputs.preview_url }}"
                  echo "ðŸ“¦ Deployment ID: ${{ steps.deploy.outputs.deployment_id }}"
                  echo "ðŸŒ¿ Branch: ${{ github.head_ref }}"

    cleanup-on-close:
        runs-on: ubuntu-latest
        if: github.event.action == 'closed'
        steps:
            - name: Cleanup Coolify deployment
              run: |
                  # Clean up the preview environment when PR is closed
                  curl -X DELETE \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/environments/preview-pr-${{ github.event.number }}"

                  echo "Cleaned up preview environment for PR #${{ github.event.number }}"
