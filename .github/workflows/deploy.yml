name: Deploy to Coolify

on:
    pull_request:
        types: [opened, synchronize, reopened]
        branches: [main, master]
    push:
        branches: [main, master]

jobs:
    deploy-preview:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up environment variables
              run: |
                  echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
                  echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
                  echo "PREVIEW_SUBDOMAIN=pr-${{ github.event.number }}-$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Deploy to Coolify
              id: deploy
              run: |
                  # Create deployment payload
                  DEPLOYMENT_PAYLOAD=$(cat <<EOF
                  {
                    "project_uuid": "${{ secrets.COOLIFY_PROJECT_UUID }}",
                    "environment_name": "preview-pr-${{ github.event.number }}",
                    "git_repository": "${{ github.repository }}",
                    "git_branch": "${{ github.head_ref }}",
                    "domains": ["${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"],
                    "environment_variables": {
                      "NODE_ENV": "production",
                      "PR_NUMBER": "${{ github.event.number }}",
                      "BRANCH_NAME": "${{ github.head_ref }}"
                    }
                  }
                  EOF
                  )

                  # Deploy to Coolify via API
                  RESPONSE=$(curl -s -X POST \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "$DEPLOYMENT_PAYLOAD" \
                    "${{ secrets.COOLIFY_API_URL }}/api/v1/deploy")

                  echo "Coolify API Response: $RESPONSE"

                  # Extract deployment ID or URL from response
                  DEPLOYMENT_ID=$(echo $RESPONSE | jq -r '.deployment_id // .id // "unknown"')
                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

                  # Wait for deployment to complete
                  echo "Waiting for deployment to complete..."
                  for i in {1..30}; do
                    STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                      "${{ secrets.COOLIFY_API_URL }}/api/v1/deployments/$DEPLOYMENT_ID/status")
                    
                    STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "pending"')
                    echo "Deployment status: $STATUS (attempt $i/30)"
                    
                    if [ "$STATUS" = "success" ] || [ "$STATUS" = "completed" ]; then
                      echo "Deployment completed successfully!"
                      break
                    elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
                      echo "Deployment failed!"
                      exit 1
                    fi
                    
                    # If we've reached the maximum attempts, exit with timeout
                    if [ $i -eq 30 ]; then
                      echo "❌ Deployment timeout after 5 minutes (30 attempts)"
                      echo "Last known status: $STATUS"
                      exit 1
                    fi
                    
                    sleep 10
                  done

                  # Set the preview URL
                  PREVIEW_URL="https://${{ env.PREVIEW_SUBDOMAIN }}.${{ secrets.COOLIFY_DOMAIN }}"
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

            - name: Comment PR with preview link
              uses: actions/github-script@v7
              with:
                  script: |
                      const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
                      const deploymentId = '${{ steps.deploy.outputs.deployment_id }}';

                      const comment = `🚀 **Preview Deployment Ready!**

                      Your PR has been deployed to Coolify:
                      🔗 **Preview URL:** ${previewUrl}
                      📦 **Deployment ID:** ${deploymentId}
                      🌟 **Branch:** \`${{ github.head_ref }}\`

                      The preview will be automatically updated when you push new commits to this PR.

                      ---
                      *Deployed via Coolify • PR #${{ github.event.number }}*`;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

            - name: Output deployment info
              run: |
                  echo "🎉 PR #${{ github.event.number }} deployed successfully!"
                  echo "🔗 Preview URL: ${{ steps.deploy.outputs.preview_url }}"
                  echo "📦 Deployment ID: ${{ steps.deploy.outputs.deployment_id }}"
                  echo "🌿 Branch: ${{ github.head_ref }}"

    deploy-production:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to Production
              id: prod-deploy
              run: |
                  # Test API endpoint first
                  echo "Testing Coolify API connectivity..."
                  TEST_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/version" || echo "CURL_FAILED")

                  echo "API Test Response: $TEST_RESPONSE"

                  # Check if we got a redirect or HTML response
                  if echo "$TEST_RESPONSE" | grep -q -i "redirect\|html\|<!DOCTYPE"; then
                    echo "❌ API returned HTML/redirect. Possible issues:"
                    echo "1. API URL should include protocol: https://your-coolify-domain.com"
                    echo "2. Check if the API is enabled in Coolify settings"
                    echo "3. Verify the API token has correct permissions"
                    exit 1
                  fi

                  # Deploy using the correct Coolify API endpoint
                  echo "Deploying to production using Coolify API..."

                  # Use the /deploy endpoint with uuid parameter (this is the correct endpoint)
                  DEPLOY_RESPONSE=$(curl -s -X GET \
                    -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                    "${{ secrets.COOLIFY_API_URL }}/deploy?uuid=${{ secrets.COOLIFY_APPLICATION_UUID }}&force=true" || echo "DEPLOY_FAILED")

                  echo "Deploy Response: $DEPLOY_RESPONSE"

                  # Check if deployment was successful
                  if echo "$DEPLOY_RESPONSE" | jq -e '.deployments' >/dev/null 2>&1; then
                    # Extract deployment UUID from the response
                    DEPLOYMENT_UUID=$(echo $DEPLOY_RESPONSE | jq -r '.deployments[0].deployment_uuid // "unknown"')
                    echo "deployment_id=$DEPLOYMENT_UUID" >> $GITHUB_OUTPUT
                    echo "✅ Deployment triggered successfully"
                    echo "📦 Deployment UUID: $DEPLOYMENT_UUID"
                  else
                    echo "❌ Deployment failed or returned unexpected response"
                    echo "Response: $DEPLOY_RESPONSE"
                    
                    # Check if it's an authentication error
                    if echo "$DEPLOY_RESPONSE" | grep -q -i "unauthorized\|unauthenticated"; then
                      echo "Authentication failed. Please check your API token."
                    fi
                    
                    # Check if it's a not found error  
                    if echo "$DEPLOY_RESPONSE" | grep -q -i "not found"; then
                      echo "Resource not found. Please check your APPLICATION_UUID."
                    fi
                    
                    exit 1
                  fi

                  # Wait for deployment to complete
                  echo "Waiting for production deployment to complete..."

                  # Only check deployment status if we have a proper deployment UUID
                  if [ "$DEPLOYMENT_UUID" != "unknown" ] && [ ! -z "$DEPLOYMENT_UUID" ]; then
                    for i in {1..60}; do
                      # Note: Coolify might not have a deployments status endpoint, so we'll wait a reasonable time
                      echo "Waiting for deployment to complete (attempt $i/60)..."
                      
                      # Try to get deployment status (this endpoint might not exist in all Coolify versions)
                      STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
                        "${{ secrets.COOLIFY_API_URL }}/deployments/$DEPLOYMENT_UUID" || echo "STATUS_CHECK_NOT_AVAILABLE")
                      
                      if [ "$STATUS_RESPONSE" != "STATUS_CHECK_NOT_AVAILABLE" ]; then
                        echo "Status Response: $STATUS_RESPONSE"
                        # Parse status if available
                        STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // "running"' 2>/dev/null || echo "running")
                        echo "Deployment status: $STATUS"
                        
                        if [ "$STATUS" = "success" ] || [ "$STATUS" = "completed" ] || [ "$STATUS" = "finished" ]; then
                          echo "✅ Production deployment completed successfully!"
                          echo "deployment_status=success" >> $GITHUB_OUTPUT
                          break
                        elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
                          echo "❌ Production deployment failed!"
                          echo "deployment_status=failed" >> $GITHUB_OUTPUT
                          exit 1
                        fi
                      fi
                      
                      # For most deployments, 5 minutes should be enough
                      if [ $i -eq 30 ]; then
                        echo "✅ Deployment has been running for 5 minutes, assuming success"
                        echo "deployment_status=assumed_success" >> $GITHUB_OUTPUT
                        break
                      fi
                      
                      sleep 10
                    done
                  else
                    echo "⚠️ No deployment UUID available, waiting 2 minutes for deployment to complete..."
                    sleep 120
                    echo "deployment_status=completed" >> $GITHUB_OUTPUT
                  fi

                  # Set the production URL
                  PRODUCTION_URL="https://${{ secrets.COOLIFY_MAIN_DOMAIN }}"
                  echo "production_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT

            - name: Test Production Deployment
              id: test-prod
              run: |
                  echo "Testing production deployment..."
                  PRODUCTION_URL="${{ steps.prod-deploy.outputs.production_url }}"

                  # Wait a moment for deployment to propagate
                  sleep 30

                  # Test if the site is accessible
                  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL" || echo "000")
                  echo "HTTP Status: $HTTP_STATUS"

                  if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
                    echo "✅ Production site is accessible!"
                    echo "site_status=accessible" >> $GITHUB_OUTPUT
                  else
                    echo "❌ Production site is not accessible (HTTP $HTTP_STATUS)"
                    echo "site_status=inaccessible" >> $GITHUB_OUTPUT
                    
                    # Don't fail the deployment for accessibility issues, just warn
                    echo "⚠️ Site may still be starting up or there could be DNS propagation delays"
                  fi

            - name: Output Production Deployment Results
              run: |
                  echo "🎉 Production deployment completed!"
                  echo "🌐 Production URL: ${{ steps.prod-deploy.outputs.production_url }}"
                  echo "📦 Deployment ID: ${{ steps.prod-deploy.outputs.deployment_id }}"
                  echo "✅ Deployment Status: ${{ steps.prod-deploy.outputs.deployment_status }}"
                  echo "🔍 Site Status: ${{ steps.test-prod.outputs.site_status }}"
                  echo "🌿 Branch: ${{ github.ref_name }}"

    cleanup-on-close:
        runs-on: ubuntu-latest
        if: github.event.action == 'closed'
        steps:
            - name: Cleanup Coolify deployment
              run: |
                  echo "PR closed - cleanup would go here"
                  echo "Note: Automatic cleanup of preview environments may need manual implementation"
                  echo "depending on your Coolify setup and API capabilities"
