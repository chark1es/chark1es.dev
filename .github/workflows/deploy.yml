name: Deploy to Coolify

on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]
        types: [opened, synchronize, reopened]
    workflow_dispatch:

env:
    COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
    COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
    COOLIFY_APPLICATION_UUID: ${{ secrets.COOLIFY_APPLICATION_UUID }}
    COOLIFY_PROJECT_UUID: ${{ secrets.COOLIFY_PROJECT_UUID }}
    COOLIFY_DOMAIN: ${{ secrets.COOLIFY_DOMAIN }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        name: Deploy to Coolify

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set deployment type
              id: deployment-type
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "type=preview" >> $GITHUB_OUTPUT
                    echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
                  else
                    echo "type=production" >> $GITHUB_OUTPUT
                  fi

            - name: Deploy to Coolify (Production)
              if: steps.deployment-type.outputs.type == 'production'
              run: |
                  echo "üöÄ Deploying to production..."

                  # Deploy using the application UUID
                  response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                    -X GET \
                    -H "Authorization: Bearer $COOLIFY_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$COOLIFY_API_URL/deploy?uuid=$COOLIFY_APPLICATION_UUID&force=false")

                  http_status=$(echo $response | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
                  response_body=$(echo $response | sed -E 's/HTTP_STATUS:[0-9]*$//')

                  echo "HTTP Status: $http_status"
                  echo "Response: $response_body"

                  if [[ $http_status -ge 200 && $http_status -lt 300 ]]; then
                    echo "‚úÖ Deployment successful!"
                    
                    # Extract deployment UUID from response
                    deployment_uuid=$(echo $response_body | jq -r '.deployments[0].deployment_uuid // empty')
                    if [[ -n "$deployment_uuid" ]]; then
                      echo "üìù Deployment UUID: $deployment_uuid"
                      echo "deployment_uuid=$deployment_uuid" >> $GITHUB_OUTPUT
                    fi
                    
                    echo "üåê Application will be available at: $COOLIFY_DOMAIN"
                  else
                    echo "‚ùå Deployment failed with status: $http_status"
                    echo "Response: $response_body"
                    exit 1
                  fi

            - name: Deploy to Coolify (Pull Request Preview)
              if: steps.deployment-type.outputs.type == 'preview'
              run: |
                  echo "üöÄ Deploying PR #${{ steps.deployment-type.outputs.pr_number }} preview..."

                  # Deploy using the application UUID with PR number
                  response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                    -X GET \
                    -H "Authorization: Bearer $COOLIFY_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$COOLIFY_API_URL/deploy?uuid=$COOLIFY_APPLICATION_UUID&pr=${{ steps.deployment-type.outputs.pr_number }}&force=false")

                  http_status=$(echo $response | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
                  response_body=$(echo $response | sed -E 's/HTTP_STATUS:[0-9]*$//')

                  echo "HTTP Status: $http_status"
                  echo "Response: $response_body"

                  if [[ $http_status -ge 200 && $http_status -lt 300 ]]; then
                    echo "‚úÖ Preview deployment successful!"
                    
                    # Extract deployment UUID from response
                    deployment_uuid=$(echo $response_body | jq -r '.deployments[0].deployment_uuid // empty')
                    if [[ -n "$deployment_uuid" ]]; then
                      echo "üìù Preview Deployment UUID: $deployment_uuid"
                      echo "deployment_uuid=$deployment_uuid" >> $GITHUB_OUTPUT
                    fi
                    
                    echo "üåê Preview will be available at a generated URL"
                  else
                    echo "‚ùå Preview deployment failed with status: $http_status"
                    echo "Response: $response_body"
                    exit 1
                  fi

            - name: Wait for deployment completion
              if: success()
              run: |
                  echo "‚è≥ Waiting for deployment to complete..."

                  # Poll deployment status for up to 10 minutes
                  max_attempts=60
                  attempt=0

                  while [[ $attempt -lt $max_attempts ]]; do
                    sleep 10
                    attempt=$((attempt + 1))
                    
                    # Check application status
                    status_response=$(curl -s \
                      -H "Authorization: Bearer $COOLIFY_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$COOLIFY_API_URL/applications/$COOLIFY_APPLICATION_UUID")
                    
                    if [[ $? -eq 0 ]]; then
                      echo "‚úÖ Deployment monitoring completed (attempt $attempt/$max_attempts)"
                      break
                    fi
                    
                    if [[ $attempt -eq $max_attempts ]]; then
                      echo "‚ö†Ô∏è Deployment monitoring timed out after 10 minutes"
                      echo "‚ÑπÔ∏è Check Coolify dashboard for deployment status"
                    fi
                  done

            - name: Add deployment comment (PR only)
              if: steps.deployment-type.outputs.type == 'preview' && github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(comment => 
                        comment.user.type === 'Bot' && 
                        comment.body.includes('üöÄ Coolify Deployment')
                      );

                      const deploymentInfo = `üöÄ **Coolify Deployment**

                      **Status:** ‚úÖ Deployed
                      **Type:** Preview (PR #${{ steps.deployment-type.outputs.pr_number }})
                      **Commit:** \`${{ github.sha }}\`
                      **Branch:** \`${{ github.head_ref }}\`

                      The preview deployment is being processed. Check your Coolify dashboard for the preview URL.

                      ---
                      *Deployed via GitHub Actions*`;

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: deploymentInfo
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: deploymentInfo
                        });
                      }

    health-check:
        runs-on: ubuntu-latest
        needs: deploy
        if: github.event_name != 'pull_request'
        name: Health Check

        steps:
            - name: Wait for application to be ready
              run: |
                  echo "üè• Performing health check..."
                  sleep 30  # Give the application time to start

                  max_attempts=12
                  attempt=0

                  while [[ $attempt -lt $max_attempts ]]; do
                    attempt=$((attempt + 1))
                    
                    if curl -f -s --max-time 10 "$COOLIFY_DOMAIN" > /dev/null; then
                      echo "‚úÖ Health check passed! Application is responding at $COOLIFY_DOMAIN"
                      exit 0
                    fi
                    
                    echo "‚è≥ Attempt $attempt/$max_attempts - Application not ready yet, waiting 10 seconds..."
                    sleep 10
                  done

                  echo "‚ùå Health check failed - Application did not respond after 2 minutes"
                  echo "üîç Please check your Coolify dashboard for deployment logs"
                  exit 1
