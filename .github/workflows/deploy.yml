name: Deploy to Coolify

on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]
        types: [opened, synchronize, reopened]
    workflow_dispatch:

env:
    COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
    COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
    COOLIFY_APPLICATION_UUID: ${{ secrets.COOLIFY_APPLICATION_UUID }}
    COOLIFY_PROJECT_UUID: ${{ secrets.COOLIFY_PROJECT_UUID }}
    COOLIFY_DOMAIN: ${{ secrets.COOLIFY_DOMAIN }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        name: Deploy to Coolify
        outputs:
            deployment_status: ${{ steps.deployment-result.outputs.status }}
            deployment_domain: ${{ steps.get-deployed-url.outputs.domain_only }}
            deployment_protocol: ${{ steps.get-deployed-url.outputs.protocol }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set deployment type
              id: deployment-type
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "type=preview" >> $GITHUB_OUTPUT
                    echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
                  else
                    echo "type=production" >> $GITHUB_OUTPUT
                  fi

            - name: Deploy to Coolify (Production)
              id: deploy-production
              if: steps.deployment-type.outputs.type == 'production'
              run: |
                  echo "🚀 Deploying to production..."

                  # Deploy using the application UUID
                  response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                    -X GET \
                    -H "Authorization: Bearer $COOLIFY_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$COOLIFY_API_URL/deploy?uuid=$COOLIFY_APPLICATION_UUID&force=false")

                  http_status=$(echo $response | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
                  response_body=$(echo $response | sed -E 's/HTTP_STATUS:[0-9]*$//')

                  echo "HTTP Status: $http_status"
                  echo "Response: $response_body"

                  if [[ $http_status -ge 200 && $http_status -lt 300 ]]; then
                    echo "✅ Deployment successful!"
                    
                    # Extract deployment UUID from response
                    deployment_uuid=$(echo $response_body | jq -r '.deployments[0].deployment_uuid // empty')
                    if [[ -n "$deployment_uuid" ]]; then
                      echo "📝 Deployment UUID: $deployment_uuid"
                      echo "deployment_uuid=$deployment_uuid" >> $GITHUB_OUTPUT
                    fi
                    
                    echo "deployment_success=true" >> $GITHUB_OUTPUT
                  else
                    echo "❌ Deployment failed with status: $http_status"
                    echo "Response: $response_body"
                    echo "deployment_success=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: Deploy to Coolify (Pull Request Preview)
              id: deploy-preview
              if: steps.deployment-type.outputs.type == 'preview'
              run: |
                  echo "🚀 Deploying PR #${{ steps.deployment-type.outputs.pr_number }} preview..."

                  # Deploy using the application UUID with PR number
                  response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                    -X GET \
                    -H "Authorization: Bearer $COOLIFY_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$COOLIFY_API_URL/deploy?uuid=$COOLIFY_APPLICATION_UUID&pr=${{ steps.deployment-type.outputs.pr_number }}&force=false")

                  http_status=$(echo $response | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
                  response_body=$(echo $response | sed -E 's/HTTP_STATUS:[0-9]*$//')

                  echo "HTTP Status: $http_status"
                  echo "Response: $response_body"

                  if [[ $http_status -ge 200 && $http_status -lt 300 ]]; then
                    echo "✅ Preview deployment successful!"
                    
                    # Extract deployment UUID from response
                    deployment_uuid=$(echo $response_body | jq -r '.deployments[0].deployment_uuid // empty')
                    if [[ -n "$deployment_uuid" ]]; then
                      echo "📝 Preview Deployment UUID: $deployment_uuid"
                      echo "deployment_uuid=$deployment_uuid" >> $GITHUB_OUTPUT
                    fi
                    
                    echo "deployment_success=true" >> $GITHUB_OUTPUT
                  else
                    echo "❌ Preview deployment failed with status: $http_status"
                    echo "Response: $response_body"
                    echo "deployment_success=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: Wait for deployment completion
              if: success()
              run: |
                  echo "⏳ Waiting for deployment to complete..."

                  # Poll deployment status for up to 10 minutes
                  max_attempts=60
                  attempt=0

                  while [[ $attempt -lt $max_attempts ]]; do
                    sleep 10
                    attempt=$((attempt + 1))
                    
                    # Check application status
                    status_response=$(curl -s \
                      -H "Authorization: Bearer $COOLIFY_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$COOLIFY_API_URL/applications/$COOLIFY_APPLICATION_UUID")
                    
                    if [[ $? -eq 0 ]]; then
                      echo "✅ Deployment monitoring completed (attempt $attempt/$max_attempts)"
                      break
                    fi
                    
                    if [[ $attempt -eq $max_attempts ]]; then
                      echo "⚠️ Deployment monitoring timed out after 10 minutes"
                      echo "ℹ️ Check Coolify dashboard for deployment status"
                    fi
                  done

            - name: Get deployed website URL
              id: get-deployed-url
              if: success()
              run: |
                  echo "🔍 Fetching deployed website URL from Coolify..."

                  # Get application details to fetch the deployed URL
                  app_response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                    -H "Authorization: Bearer $COOLIFY_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$COOLIFY_API_URL/applications/$COOLIFY_APPLICATION_UUID")

                  app_http_status=$(echo $app_response | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
                  app_response_body=$(echo $app_response | sed -E 's/HTTP_STATUS:[0-9]*$//')

                  if [[ $app_http_status -eq 200 ]]; then
                    # Extract FQDN (Fully Qualified Domain Name) which contains the deployed URL
                    site=$(echo $app_response_body | jq -r '.fqdn // empty')
                    
                    # If FQDN is empty, try to get from domains field
                    if [[ -z "$site" || "$site" == "null" ]]; then
                      site=$(echo $app_response_body | jq -r '.domains // empty')
                    fi
                    
                    # If still empty, use the configured domain
                    if [[ -z "$site" || "$site" == "null" ]]; then
                      site="$COOLIFY_DOMAIN"
                      echo "⚠️ Could not extract URL from Coolify response, using configured domain"
                    fi
                    
                    # Ensure URL has proper protocol
                    if [[ ! "$site" =~ ^https?:// ]]; then
                      site="https://$site"
                    fi
                    
                    # Prevent GitHub from masking the URL by using workflow commands
                    echo "🌐 Deployed website URL: $site"
                    echo "::notice title=Deployed URL::$site"
                    
                    # Split URL into protocol and domain to avoid GitHub treating it as a secret
                    protocol=$(echo "$site" | sed -E 's|(https?://).*|\1|')
                    domain=$(echo "$site" | sed -E 's|https?://(.*)|\1|')
                    
                    echo "protocol=$protocol" >> $GITHUB_OUTPUT
                    echo "domain_only=$domain" >> $GITHUB_OUTPUT
                    
                    # Store URL using a non-sensitive name and explicit non-masking
                    echo "::stop-commands::random-stop-token-12345"
                    echo "APP_LIVE_URL=$site" >> $GITHUB_ENV
                    echo "::random-stop-token-12345::"
                    
                    # Also output application status for verification
                    app_status=$(echo $app_response_body | jq -r '.status // "unknown"')
                    echo "📊 Application Status: $app_status"
                    echo "app_status=$app_status" >> $GITHUB_OUTPUT
                    
                  else
                    echo "⚠️ Could not fetch application details (HTTP $app_http_status)"
                    echo "Using configured domain as fallback: $COOLIFY_DOMAIN"
                    
                    # Extract protocol and domain from fallback
                    protocol=$(echo "$COOLIFY_DOMAIN" | sed -E 's|(https?://).*|\1|')
                    domain=$(echo "$COOLIFY_DOMAIN" | sed -E 's|https?://(.*)|\1|')
                    
                    echo "protocol=$protocol" >> $GITHUB_OUTPUT
                    echo "domain_only=$domain" >> $GITHUB_OUTPUT
                    
                    # Store fallback URL
                    echo "::notice title=Fallback URL::$COOLIFY_DOMAIN"
                    echo "::stop-commands::random-stop-token-12345"
                    echo "APP_LIVE_URL=$COOLIFY_DOMAIN" >> $GITHUB_ENV
                    echo "::random-stop-token-12345::"
                    echo "app_status=unknown" >> $GITHUB_OUTPUT
                  fi

            - name: Set deployment result
              id: deployment-result
              if: always()
              run: |
                  if [[ "${{ steps.deploy-production.outputs.deployment_success }}" == "true" || "${{ steps.deploy-preview.outputs.deployment_success }}" == "true" ]]; then
                    echo "status=success" >> $GITHUB_OUTPUT
                  else
                    echo "status=failed" >> $GITHUB_OUTPUT
                  fi

            - name: Health check (same job)
              if: success() && github.event_name != 'pull_request'
              run: |
                  echo "🏥 Performing health check..."
                  site="$APP_LIVE_URL"

                  echo "🔗 Testing URL: $site"
                  sleep 30  # Give the application time to start

                  max_attempts=12
                  attempt=0

                  while [[ $attempt -lt $max_attempts ]]; do
                    attempt=$((attempt + 1))
                    
                    if curl -f -s --max-time 10 "$site" > /dev/null; then
                      echo "✅ Health check passed! Application is responding at $site"
                      echo "🎉 Deployment completed successfully!"
                      echo "HEALTH_CHECK_PASSED=true" >> $GITHUB_ENV
                      break
                    fi
                    
                    echo "⏳ Attempt $attempt/$max_attempts - Application not ready yet, waiting 10 seconds..."
                    sleep 10
                  done

                  if [[ $attempt -eq $max_attempts ]]; then
                    echo "❌ Health check failed - Application did not respond after 2 minutes"
                    echo "🔍 Please check your Coolify dashboard for deployment logs"
                    echo "🔗 Attempted URL: $site"
                    echo "HEALTH_CHECK_PASSED=false" >> $GITHUB_ENV
                  fi

            - name: Add deployment comment (PR only)
              if: steps.deployment-type.outputs.type == 'preview' && github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(comment => 
                        comment.user.type === 'Bot' && 
                        comment.body.includes('🚀 Coolify Deployment')
                      );

                      const protocol = '${{ steps.get-deployed-url.outputs.protocol }}';
                      const domain = '${{ steps.get-deployed-url.outputs.domain_only }}';
                      const site = protocol + domain;
                      const appStatus = '${{ steps.get-deployed-url.outputs.app_status }}';
                      const deploymentStatus = '${{ steps.deployment-result.outputs.status }}';

                      const deploymentInfo = `🚀 **Coolify Deployment**

                      **Status:** ${deploymentStatus === 'success' ? '✅ Deployed' : '❌ Failed'}
                      **Type:** Preview (PR #${{ steps.deployment-type.outputs.pr_number }})
                      **Commit:** \`${{ github.sha }}\`
                      **Branch:** \`${{ github.head_ref }}\`
                      **App Status:** \`${appStatus}\`

                      ${deploymentStatus === 'success' ? `**🌐 Deployed URL:** ${site}` : 'Deployment failed. Check the Actions logs for details.'}

                      ---
                      *Deployed via GitHub Actions*`;

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: deploymentInfo
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: deploymentInfo
                        });
                      }

            - name: Create deployment summary
              if: always() && github.event_name != 'pull_request'
              run: |
                  echo "# 🚀 Coolify Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [[ "${{ steps.deployment-result.outputs.status }}" == "success" ]]; then
                    site="${{ steps.get-deployed-url.outputs.protocol }}${{ steps.get-deployed-url.outputs.domain_only }}"
                    echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "**Deployed URL:** $site" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "**App Status:** \`${{ steps.get-deployed-url.outputs.app_status }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    
                    if [[ "$HEALTH_CHECK_PASSED" == "true" ]]; then
                      echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
                    elif [[ "$HEALTH_CHECK_PASSED" == "false" ]]; then
                      echo "**Health Check:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
                    else
                      echo "**Health Check:** ⏭️ Skipped (PR deployment)" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "The deployment to Coolify failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "---" >> $GITHUB_STEP_SUMMARY
                  echo "*View your application in [Coolify Dashboard](${COOLIFY_API_URL%/api})*" >> $GITHUB_STEP_SUMMARY
