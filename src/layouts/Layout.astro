---
// Import the global.css file here so that it is included on
// all pages through the use of the <SEO /> component.
import "../styles/globals.scss";
import SectionContainer from "@/components/SectionContainer.astro";
import SEO from "@/components/seo/SEO.astro";
import Navigation from "../components/Navigation.astro";
import { ClientRouter } from "astro:transitions";
const currentYear = new Date().getFullYear();

const {
    class: className,
    title,
    description,
    keywords,
    url,
    // twitterhandle,
    image,
} = Astro.props;
---

<html lang="en">
    <head class="">
        <SEO
            title={title}
            description={description}
            keywords={keywords}
            url={url}
            image={image}
        />
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const letters =
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789@#$%^&*()_+{}|:<>?/.,';][=-`~";

                // Function to run the shuffling effect
                function startShuffleEffect(element: HTMLElement) {
                    return setInterval(() => {
                        element.innerText = element.innerText
                            .split("")
                            .map(
                                () =>
                                    letters[
                                        Math.floor(
                                            Math.random() * letters.length,
                                        )
                                    ],
                            )
                            .join("");
                    }, 30);
                }

                // Function to reveal the original text character by character
                function startRevealEffect(
                    element: HTMLElement,
                    callback?: ReturnType<typeof setInterval>,
                ) {
                    const targetText = element.dataset.value || "";
                    let iteration = 0;
                    return setInterval(() => {
                        element.innerText = element.innerText
                            .split("")
                            .map((_, index) => {
                                if (index < iteration) {
                                    return targetText[index];
                                }
                                return letters[
                                    Math.floor(Math.random() * letters.length)
                                ];
                            })
                            .join("");
                        iteration++;

                        if (iteration >= targetText.length) {
                            if (callback) clearInterval(callback);
                            element.innerText = targetText;
                        }
                    }, 30);
                }

                // Select all elements with the `.hack-effect` class
                const elements = document.querySelectorAll(".hack-effect");

                elements.forEach((element) => {
                    let interval: ReturnType<typeof setInterval> | undefined;
                    const htmlElement = element as HTMLElement;

                    // Initialize by revealing the original text
                    interval = startRevealEffect(htmlElement, interval);

                    // If it has the .hack-hover-effect class, attach the hover and mouseout events
                    if (htmlElement.classList.contains("hack-hover-effect")) {
                        htmlElement.onmouseover = () => {
                            clearInterval(interval);
                            interval = startShuffleEffect(htmlElement);
                        };

                        htmlElement.onmouseout = () => {
                            clearInterval(interval);
                            interval = startRevealEffect(htmlElement, interval);
                        };
                    }
                });
            });
        </script>
        <!-- <ViewTransitions /> -->
        <ClientRouter />
        <script
            src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js"
        ></script>
        <script src="../../node_modules/flowbite/dist/flowbite.min.js"></script>
        <script is:inline>
            // It's best to inline this in `head` to avoid FOUC (flash of unstyled content) when changing pages or themes

            if (
                localStorage.getItem("color-theme") === "dark" ||
                (!("color-theme" in localStorage) &&
                    window.matchMedia("(prefers-color-scheme: dark)").matches)
            ) {
                document.documentElement.classList.add("dark");
            } else {
                document.documentElement.classList.remove("dark");
            }
        </script>
        <script
            src="https://code.iconify.design/iconify-icon/1.0.8/iconify-icon.min.js"
        ></script>
    </head>
    <Navigation />
    <body class="dark:bg-dark_mode_bg bg-neutral-50">
        <main class={className}>
            <slot />
        </main>

        <SectionContainer class="sticky top-[100vh]">
            <footer class="pb-8 pt-8 bg-neutral-50 dark:bg-dark_mode_bg">
                <div class="wrap-sm mx-auto px-8 grid gap-8">
                    <span
                        class="hidden md:flex text-neutral-500 text-sm flex-wrap mx-auto gap-4 md:gap-0 justify-between"
                    >
                        <a class="group relative" href="/termsofservice">
                            <span class="">Terms of Service</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>
                        <div class="px-2">|</div>
                        <a class="group relative" href="/privacypolicy">
                            <span class="">Privacy Policy</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>
                        <div class="px-2">|</div>
                        <a class="group relative" href="/acknowledgements">
                            <span class="">Acknowledgements</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>
                    </span>
                    <span
                        class="flex md:hidden text-neutral-500 text-sm mx-auto gap-4 md:gap-0 flex-col items-center justify-center mb-2"
                    >
                        <a class="" href="/termsofservice">
                            <span class="">Terms of Service</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>

                        <a class="" href="/privacypolicy">
                            <span class="">Privacy Policy</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>

                        <a class="" href="/acknowledgements">
                            <span class="">Acknowledgements</span>
                            <span
                                class="transition-all group-hover:duration-500 ease-in-out absolute bottom-0 left-1/2 w-[100%] h-0.5 bg-black-500 transform -translate-x-1/2 scale-x-0 dark:bg-dark_mode_text_gray group-hover:scale-x-100"
                            ></span>
                        </a>
                    </span>

                    <span
                        class="text-neutral-500 text-sm flex flex-wrap -mt-6 mx-auto gap-4 md:gap-0 md:justify-between"
                    >
                        <span class="">Copyright Â© {currentYear} chark1es</span
                        >
                        <a class="" href="https://www.chark1es.dev/"> </a>
                    </span>
                </div>
            </footer>
        </SectionContainer>

        <button
            id="scrollToTopBtn"
            class="dark:text-dark_mode_text bg-gray-100 dark:bg-dark_mode_post hover:duration-500 hover:scale-110 items-center justify-center text-gray-400 bottom-5 fixed h-10 inline-flex right-3 rounded-lg shadow-xl transition w-10 z-10 opacity-0"
        >
            <iconify-icon
                icon="fluent:arrow-up-12-filled"
                height="20"
                width="20"></iconify-icon>
        </button>

        <script>
            const setFixedWidth = () => {
                const navBar = document.querySelector("nav");
                if (navBar) {
                    navBar.classList.add("fixed-width");
                    document.body.style.overflowY = "scroll";
                }
            };

            const setDarkMode = () => {
                const themeToggleDarkIcon = document.getElementById(
                    "theme-toggle-dark-icon",
                );
                const themeToggleLightIcon = document.getElementById(
                    "theme-toggle-light-icon",
                );

                if (!themeToggleDarkIcon || !themeToggleLightIcon) return;

                const isDarkMode =
                    localStorage.getItem("color-theme") === "dark" ||
                    (!localStorage.getItem("color-theme") &&
                        window.matchMedia("(prefers-color-scheme: dark)")
                            .matches);

                if (isDarkMode) {
                    document.documentElement.classList.add("dark");
                    document.body.classList.add("dark");
                    themeToggleDarkIcon.classList.remove("hidden");
                    themeToggleLightIcon.classList.add("hidden");
                } else {
                    document.documentElement.classList.remove("dark");
                    document.body.classList.remove("dark");
                    themeToggleDarkIcon.classList.add("hidden");
                    themeToggleLightIcon.classList.remove("hidden");
                }
            };
            const themeToggleBtn = document.getElementById("theme-toggle");
            if (themeToggleBtn) {
                themeToggleBtn.addEventListener("click", () => {
                    const isDarkMode =
                        document.documentElement.classList.contains("dark");
                    if (isDarkMode) {
                        document.documentElement.classList.remove("dark");
                        localStorage.setItem("color-theme", "light");
                    } else {
                        document.documentElement.classList.add("dark");
                        localStorage.setItem("color-theme", "dark");
                    }
                    setDarkMode();
                });
            }

            let isScrolledToTop = true; // Track whether the scrollbar is at the top

            const handleScroll = () => {
                const scrollToTopBtn =
                    document.getElementById("scrollToTopBtn");
                if (!scrollToTopBtn) return;

                if (window.pageYOffset > 0) {
                    scrollToTopBtn.classList.remove("hidden");
                    scrollToTopBtn.classList.remove("fade-out");

                    if (isScrolledToTop) {
                        scrollToTopBtn.classList.remove("fade-in");
                        setTimeout(() => {
                            scrollToTopBtn?.classList.add("fade-in");
                        }, 300);
                    }

                    isScrolledToTop = false;
                } else {
                    scrollToTopBtn.classList.remove("fade-in");
                    scrollToTopBtn.classList.add("fade-out");
                    setTimeout(() => {
                        scrollToTopBtn?.classList.add("hidden");
                    }, 300);

                    isScrolledToTop = true;
                }
            };

            window.addEventListener("scroll", handleScroll);

            const scrollToTop = () => {
                window.scrollTo({
                    top: 0,
                    behavior: "smooth",
                });
            };

            document.addEventListener("astro:after-swap", () => {
                setFixedWidth();
                setDarkMode();
                handleScroll();

                const scrollToTopBtn =
                    document.getElementById("scrollToTopBtn");
                if (scrollToTopBtn) {
                    scrollToTopBtn.removeEventListener("click", scrollToTop);
                    scrollToTopBtn.addEventListener("click", scrollToTop);
                }

                const themeToggleBtn = document.getElementById("theme-toggle");
                if (themeToggleBtn) {
                    themeToggleBtn.addEventListener("click", () => {
                        const isDarkMode =
                            document.documentElement.classList.contains("dark");
                        if (isDarkMode) {
                            document.documentElement.classList.remove("dark");
                            localStorage.setItem("color-theme", "light");
                        } else {
                            document.documentElement.classList.add("dark");
                            localStorage.setItem("color-theme", "dark");
                        }
                        setDarkMode();
                    });
                }
            });
            document.addEventListener("DOMContentLoaded", () => {
                setDarkMode();
                setFixedWidth();
                handleScroll();
                const scrollToTopBtn =
                    document.getElementById("scrollToTopBtn");
                if (scrollToTopBtn) {
                    scrollToTopBtn.addEventListener("click", scrollToTop);
                }
            });
            document.addEventListener(
                "astro:page-load",
                () => {
                    if (document.documentElement.classList.contains("dark")) {
                        document.documentElement.classList.remove("dark");
                    }
                    document.documentElement.classList.add("dark");
                    localStorage.setItem("color-theme", "dark");
                },
                { once: true },
            );

            window.addEventListener("scroll", handleScroll);
        </script>

        <style>
            .fade-in {
                opacity: 1;
                transition: opacity 0.5s ease-in;
            }
            .fade-out {
                opacity: 0;
                transition: opacity 0.5s ease-out;
            }
            body {
                overflow: hidden;
            }
            /* Style the scrollbar for WebKit (Chrome, Safari) */
            body::-webkit-scrollbar {
                width: 12px;
                background-color: transparent;
            }

            body::-webkit-scrollbar-track {
                background-color: transparent;
            }

            body.dark::-webkit-scrollbar-thumb {
                border-radius: 8px;
                background-color: #363636;
            }

            body.dark::-webkit-scrollbar-thumb:hover {
                background-color: #555;
            }

            body::-webkit-scrollbar-thumb {
                border-radius: 8px;
                background-color: #c1c1c1;
            }

            body::-webkit-scrollbar-thumb:hover {
                background-color: #a0a0a0;
            }

            /* Style the scrollbar for Mozilla Firefox */
            body {
                scrollbar-width: thin;
                scrollbar-color: #363636 transparent;
            }

            body.dark::-moz-scrollbar-thumb {
                border-radius: 8px;
                background-color: #363636;
            }

            body.dark::-moz-scrollbar-thumb:hover {
                background-color: #555;
            }

            body::-moz-scrollbar {
                width: 12px;
                background-color: transparent;
            }

            body::-moz-scrollbar-track {
                background-color: transparent;
            }

            body::-moz-scrollbar-thumb {
                border-radius: 8px;
                background-color: #c1c1c1;
            }

            body::-moz-scrollbar-thumb:hover {
                background-color: #a0a0a0;
            }

            /* Hide the scrollbar initially */
            body {
                scrollbar-width: 0;
                -ms-overflow-style: none; /* IE and Edge */
                overflow: -moz-scrollbars-none; /* Firefox */
            }

            /* Show the scrollbar when dark mode is applied */
            body.dark {
                scrollbar-width: thin;
                -ms-overflow-style: auto; /* IE and Edge */
                overflow: overlay; /* Firefox */
            }
        </style>
    </body>
</html>
